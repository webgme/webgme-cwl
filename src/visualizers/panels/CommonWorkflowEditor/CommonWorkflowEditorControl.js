/*globals define, WebGMEGlobal*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Tue Mar 08 2022 12:59:55 GMT-0600 (Central Standard Time).
 */

define([
    'js/Constants',
    'js/Utils/GMEConcepts',
    'js/NodePropertyNames'
], function (
    CONSTANTS,
    GMEConcepts,
    nodePropertyNames
) {

    'use strict';

    function CommonWorkflowEditorControl(options) {

        this._logger = options.logger.fork('Control');
        this._client = options.client;
        this._currentNodeId = null;
        this._currentNodeParentId = undefined;
        this._updateWidget = null;
        this._descriptor = null;

        //build meta info - does it necessary? where is the shorthand?
        this._META = {};
        this._id2meta = {};
        this._client.getAllMetaNodes(false).forEach(metaNode => {
            this._META[metaNode.getFullyQualifiedName()] = metaNode;
            this._id2meta[metaNode.getId()] = metaNode.getFullyQualifiedName();
        });

        this._logger.debug('ctor finished');

    }

    /* * * * * * * * Visualizer content update callbacks * * * * * * * */
    // One major concept here is with managing the territory. The territory
    // defines the parts of the project that the visualizer is interested in
    // (this allows the browser to then only load those relevant parts).
    CommonWorkflowEditorControl.prototype.selectedObjectChanged = function (nodeId) {

        this._logger.debug('activeObject nodeId \'' + nodeId + '\'');

        // Remove current territory patterns
        if (this._currentNodeId) {
            this._client.removeUI(this._territoryId);
        }

        this._currentNodeId = nodeId;
        this._currentNodeParentId = undefined;

        if (typeof this._currentNodeId === 'string') {
            const node = this._client.getNode(nodeId);
            this._currentNodeParentId = node.getParentId();
            if(this._currentNodeParentId !== '/f') {
                this._descriptor = null;
                return;
            }
            this._selfPatterns = {};
            this._selfPatterns[nodeId] = {children: 2};
            this._selfPatterns['/f'] = {children: 1}; //all workflows in the project

            this._territoryId = this._client.addUI(this, events => {
                this._eventCallback(events);
            });

            // Update the territory
            this._client.updateTerritory(this._territoryId, this._selfPatterns);
        }
    };

    // This next function retrieves the relevant node information for the widget
    CommonWorkflowEditorControl.prototype._createDescriptor = function () {
        const MainNode = this._client.getNode(this._currentNodeId);
        const descriptor = {nodes:[], edges:[], global: {}};

        MainNode.getChildrenIds().forEach(childId => {
            const childNode = this._client.getNode(childId);
            if(childNode.isInstanceOf(this._META['CWL.Step'].getId())) {
                descriptor.nodes.push(this._createStepDescriptor(childId));
            } else if(childNode.isInstanceOf(this._META['CWL.Input'].getId())) {
                descriptor.nodes.push(this._createPortNodeDescriptor(childId));
            } else if(childNode.isInstanceOf(this._META['CWL.Output'].getId())) {
                descriptor.nodes.push(this._createPortNodeDescriptor(childId));
            } else if(childNode.isConnection()) {
                descriptor.edges.push(this._createEdgeDescriptor(childId));
            }
        });

        return this._setDescriptor(descriptor);
    };

    CommonWorkflowEditorControl.prototype._createPortNodeDescriptor = function (nodeId) {
        const node = this._client.getNode(nodeId);
        const descriptor = {id: nodeId, type:'port', position: node.getRegistry('position'), data:{name: node.getAttribute('name')}};

        return descriptor;
    };

    CommonWorkflowEditorControl.prototype._createStepDescriptor = function (nodeId) {
        const node = this._client.getNode(nodeId);
        const childrenIds = node.getChildrenIds();
        const descriptor = {id: nodeId, type:'step', position: node.getRegistry('position'), data:{name: node.getAttribute('name'), inputs:{}, outputs:{}}};

        childrenIds.forEach(childId => {
            const childNode = this._client.getNode(childId);
            if(childNode.isInstanceOf(this._META['CWL.Input'].getId())) {
                descriptor.data.inputs[childNode.getAttribute('name')] = {type:this._id2meta[childNode.getMetaTypeId()]};
            } else {
                descriptor.data.outputs[childNode.getAttribute('name')] = {type:this._id2meta[childNode.getMetaTypeId()]};
            }
        });

        return descriptor;
    };

    CommonWorkflowEditorControl.prototype._createEdgeDescriptor = function (nodeId) {
        const node = this._client.getNode(nodeId);
        const childrenIds = node.getChildrenIds();
        const descriptor = {id: nodeId};
        const sourceNode = this._client.getNode(node.getPointerId('src'));
        const destNode = this._client.getNode(node.getPointerId('dst'));
        const sourceIsPort = sourceNode.getParentId() === this._currentNodeId ? false : true;
        const destIsPort = sourceNode.getParentId() === this._currentNodeId ? false : true;

        if(sourceIsPort) {
            descriptor.source = sourceNode.getParentId();
            descriptor.sourceHandle = sourceNode.getAttribute('name');
        } else {
            descriptor.source = sourceNode.getId();
        }

        if(destIsPort) {
            descriptor.source = destNode.getParentId();
            descriptor.sourceHandle = destNode.getAttribute('name');
        } else {
            descriptor.source = destNode.getId();
        }

        return descriptor;
    };

    CommonWorkflowEditorControl.prototype._createSubWorkflowDescriptor = function (nodeId) {

    };

    CommonWorkflowEditorControl.prototype._setDescriptor = function (descriptor) {
        this._descriptor = descriptor;

        if(this._updateWidget) {
            this._updateWidget(descriptor);
        }
    };

    /* * * * * * * * Node Event Handling * * * * * * * */
    CommonWorkflowEditorControl.prototype._eventCallback = function (events) {
        var i = events ? events.length : 0,
            event;

        this._logger.debug('_eventCallback \'' + i + '\' items');
        // if(this._updateWidget !== null) {
            // console.log('we got widget connection');
            // this._updateWidget([],[],{});
        // }

        if (events[0] && events[0].etype === 'complete') {
            //we have what we need
            this._createDescriptor();
        }
        this._logger.debug('_eventCallback \'' + events.length + '\' items - DONE');
    };

    CommonWorkflowEditorControl.prototype._stateActiveObjectChanged = function (model, activeObjectId) {
        if (this._currentNodeId === activeObjectId) {
            // The same node selected as before - do not trigger
        } else {
            this.selectedObjectChanged(activeObjectId);
        }
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    CommonWorkflowEditorControl.prototype.destroy = function () {
        this._detachClientEventListeners();
        this._removeToolbarItems();
    };

    CommonWorkflowEditorControl.prototype._attachClientEventListeners = function () {
        this._detachClientEventListeners();
        WebGMEGlobal.State.on('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged, this);
    };

    CommonWorkflowEditorControl.prototype._detachClientEventListeners = function () {
        WebGMEGlobal.State.off('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged);
    };

    CommonWorkflowEditorControl.prototype.onActivate = function () {
        this._attachClientEventListeners();
        this._displayToolbarItems();

        if (typeof this._currentNodeId === 'string') {
            WebGMEGlobal.State.registerActiveObject(this._currentNodeId, {suppressVisualizerFromNode: true});
        }
    };

    CommonWorkflowEditorControl.prototype.onDeactivate = function () {
        this._detachClientEventListeners();
        this._hideToolbarItems();
    };

    CommonWorkflowEditorControl.prototype.registerUpdate = function (func) {
        const firstTry = this._updateWidget === null ? true : false;
        this._updateWidget = func;
        if(this._descriptor && firstTry) {
            this._updateWidget(this._descriptor);
        }
    };

    /* * * * * * * * * * Updating the toolbar * * * * * * * * * */
    CommonWorkflowEditorControl.prototype._displayToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].show();
            }
        } else {
            this._initializeToolbar();
        }
    };

    CommonWorkflowEditorControl.prototype._hideToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].hide();
            }
        }
    };

    CommonWorkflowEditorControl.prototype._removeToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].destroy();
            }
        }
    };

    CommonWorkflowEditorControl.prototype._initializeToolbar = function () {
        var self = this,
            toolBar = WebGMEGlobal.Toolbar;

        this._toolbarItems = [];

        return;

        this._toolbarItems.push(toolBar.addSeparator());

        /************** Go to hierarchical parent button ****************/
        this.$btnModelHierarchyUp = toolBar.addButton({
            title: 'Go to parent',
            icon: 'glyphicon glyphicon-circle-arrow-up',
            clickFn: function (/*data*/) {
                WebGMEGlobal.State.registerActiveObject(self._currentNodeParentId);
            }
        });
        this._toolbarItems.push(this.$btnModelHierarchyUp);
        this.$btnModelHierarchyUp.hide();

        /************** Checkbox example *******************/

        this.$cbShowConnection = toolBar.addCheckBox({
            title: 'toggle checkbox',
            icon: 'gme icon-gme_diagonal-arrow',
            checkChangedFn: function (data, checked) {
                self._logger.debug('Checkbox has been clicked!');
            }
        });
        this._toolbarItems.push(this.$cbShowConnection);

        this._toolbarInitialized = true;
    };

    return CommonWorkflowEditorControl;
});
