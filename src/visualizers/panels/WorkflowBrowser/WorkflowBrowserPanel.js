/*globals define, _, WebGMEGlobal*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Tue Mar 08 2022 12:59:55 GMT-0600 (Central Standard Time).
 */

define([
    'js/PanelBase/PanelBaseWithHeader',
    'js/PanelManager/IActivePanel',
    'webgme-cwl/bundles/WorkflowBrowserWidget.bundle',
    './WorkflowBrowserControl',
    'css!webgme-cwl/bundles/styles/WorkflowBrowserWidget.bundle.css'
], function (
    PanelBaseWithHeader,
    IActivePanel,
    WorkflowBrowserWidget,
    WorkflowBrowserControl
) {
    'use strict';

    function WorkflowBrowserPanel(layoutManager, params) {
        var options = {};
        //set properties from options
        options[PanelBaseWithHeader.OPTIONS.LOGGER_INSTANCE_NAME] = 'WorkflowBrowserPanel';
        options[PanelBaseWithHeader.OPTIONS.FLOATING_TITLE] = true;

        //call parent's constructor
        PanelBaseWithHeader.apply(this, [options, layoutManager]);

        this._client = params.client;
        this.appId = `react-workflow-browser`;

        //initialize UI
        this._initialize();

        this.logger.debug('ctor finished');
    }

    //inherit from PanelBaseWithHeader
    _.extend(WorkflowBrowserPanel.prototype, PanelBaseWithHeader.prototype);
    _.extend(WorkflowBrowserPanel.prototype, IActivePanel.prototype);

    WorkflowBrowserPanel.prototype._initialize = function () {
        var self = this;

        this.$el.prop('id', this.appId);
        this.$el.css({
            width: '100%',
            height: '100%',
        });

        //set Widget title
        // this.setTitle('');

        // this.widget = new CommonWorkflowEditorWidget(this.logger, this.$el);

        // this.widget.setTitle = function (title) {
            // self.setTitle(title);
        // };

        this.control = new WorkflowBrowserControl({
            logger: this.logger,
            client: this._client,
            widget: this.widget
        });

        this.onActivate();
    };

    WorkflowBrowserPanel.prototype.afterAppend = function afterAppend() {
        console.log('AFTER APPEND');
        WorkflowBrowserWidget(this.appId, this.control, this);
    };

    /* OVERRIDE FROM WIDGET-WITH-HEADER */
    /* METHOD CALLED WHEN THE WIDGET'S READ-ONLY PROPERTY CHANGES */
    WorkflowBrowserPanel.prototype.onReadOnlyChanged = function (isReadOnly) {
        //apply parent's onReadOnlyChanged
        PanelBaseWithHeader.prototype.onReadOnlyChanged.call(this, isReadOnly);

    };

    WorkflowBrowserPanel.prototype.onResize = function (width, height) {
        this.logger.debug('onResize --> width: ' + width + ', height: ' + height);
        // this.widget.onWidgetContainerResize(width, height);
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    WorkflowBrowserPanel.prototype.destroy = function () {
        this.control.destroy();
        // this.widget.destroy();

        PanelBaseWithHeader.prototype.destroy.call(this);
        WebGMEGlobal.KeyboardManager.setListener(undefined);
        WebGMEGlobal.Toolbar.refresh();
    };

    WorkflowBrowserPanel.prototype.onActivate = function () {
        // this.widget.onActivate();
        this.control.onActivate();
        WebGMEGlobal.KeyboardManager.setListener(this.widget);
        WebGMEGlobal.Toolbar.refresh();
    };

    WorkflowBrowserPanel.prototype.onDeactivate = function () {
        // this.widget.onDeactivate();
        this.control.onDeactivate();
        WebGMEGlobal.KeyboardManager.setListener(undefined);
        WebGMEGlobal.Toolbar.refresh();
    };

    return WorkflowBrowserPanel;
});
