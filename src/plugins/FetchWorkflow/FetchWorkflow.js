/*globals define*/
/*eslint-env node, browser*/

/**
 * Generated by PluginGenerator 2.20.5 from webgme on Mon Jul 03 2023 17:22:18 GMT-0500 (Central Daylight Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    'q',
    'webgme-cwl/config'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase,
    Q,
    CONFIG) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of FetchWorkflow.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin FetchWorkflow.
     * @constructor
     */
    function FetchWorkflow() {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    }

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructure etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    FetchWorkflow.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    FetchWorkflow.prototype = Object.create(PluginBase.prototype);
    FetchWorkflow.prototype.constructor = FetchWorkflow;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(Error|null, plugin.PluginResult)} callback - the result callback
     */
    FetchWorkflow.prototype.main = function (callback) {
        // Use this to access core, project, result, logger etc from PluginBase.
        const {core, logger, activeNode, result, __aadToken} = this;
        const executionId = CONFIG.makeid('fetch_');
        const saveDirectory = './OUTPUT/' + executionId;  //TODO how to properly set this and create a temporary directory
        const fs = require('fs').promises;
        const path = require('path');
        const currentConfig = this.getCurrentConfig();
        const workflowName = core.getAttribute(activeNode, 'name');
        const pdpId = CONFIG.strToPDP(currentConfig.value);


        fs.mkdir(saveDirectory)
        .then(() => {
            console.log(path.normalize(path.join(saveDirectory,'metadata.json')));
            const spawndef = Q.defer();
            const { spawn } = require('node:child_process');
            // const pushing = spawn('./release.sh', [],{cwd:saveDirectory});
            const pushing = spawn('java',
                ['-jar',
                '-Dspring.profiles.active=passthrough',
                process.env.LEAP_CLI + 'leap_cli.jar',
                'pull', 
                '-d', 
                './' + executionId,
                '-p',
                pdpId.process,
                '-i',
                pdpId.index,
                '-t',
                __aadToken],
                {cwd:path.normalize('OUTPUT')}
            );
            pushing.stdout.on('data', (data) => {
                console.log(`stdout: ${data}`);
            });
            
            pushing.stderr.on('data', (data) => {
                console.error(`stderr: ${data}`);
                spawndef.reject('FAILED fetching from PDP!');
            });
            
            pushing.on('close', (code) => {
                console.log(`child process exited with code ${code}`);
                if (code === 0) {
                    spawndef.resolve(null);
                } else {
                    spawndef.reject('Failed uploading content!');
                }
            });
            return spawndef.promise;
        })
        .then(() => {
            // return fs.readdir(path.normalize(saveDirectory+'/cwl/ds'));
            return this.walkDir(saveDirectory);
        })
        .then((files) => {
            console.log(files)
            //TODO now we should find the exchange file and pass it to the import plugin
            let filepath = null;
            files.forEach(file => {
                if (file.indexOf('.CWF') !== -1) {
                    filepath = path.resolve(process.cwd(),file); 
                }
            });

            console.log(filepath);
            if(!filepath) {
                return Q(null);
            }
            
            return fs.readFile(filepath,{encoding:'utf8'});
        })
        .then((content) => {
            console.log(content);
            if(!content) {
                throw new Error('unable to find workflow exchange file!');
            }
            const json = JSON.parse(content);
            return this.invokePlugin('ImportWorkflow',{pluginConfig:{json}});
        })
        .then(innerResult => {
            if(!innerResult.success) {
                throw new Error ('cannot get the exchange format of the workflow!');
            }
            return this.save('ImportWorkflow have added a new workflow to the project');
        })
        .then(()=>{
            result.setSuccess(true);
            callback(null, result);
        })
        .catch(e => {
            logger.error(e);
            return callback(e);
        });

    };

    FetchWorkflow.prototype.walkDir = function (startDir) {
        const fs = require('fs');
        const walk = (dir) => {
            let results = [];
            const list = fs.readdirSync(dir);
            list.forEach(file => {
                file = dir + '/' + file;
                const stat = fs.statSync(file);
                if (stat && stat.isDirectory()) { 
                    /* Recurse into a subdirectory */
                    results = results.concat(walk(file));
                } else { 
                    /* Is a file */
                    results.push(file);
                }
            });
            return results;
        }

        return walk(startDir);
    };

    return FetchWorkflow;
});
