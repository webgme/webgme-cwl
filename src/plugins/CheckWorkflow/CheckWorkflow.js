/*globals define*/
/*eslint-env node, browser*/

/**
 * Generated by PluginGenerator 2.20.5 from webgme on Tue Apr 18 2023 14:31:05 GMT-0500 (Central Daylight Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of CheckWorkflow.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin CheckWorkflow.
     * @constructor
     */
    function CheckWorkflow() {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    }

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructure etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    CheckWorkflow.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    CheckWorkflow.prototype = Object.create(PluginBase.prototype);
    CheckWorkflow.prototype.constructor = CheckWorkflow;

    /**
    /* It can be confusing to have multiple nodes with the same name on the same level
    /* and will generally cause a faulty CWL artifacts generation
    */
    CheckWorkflow.prototype.checkUniqueName = function () {
        const {core, _nodes, activeNode, createMessage, result, checkUniqueName} = this;
        const checkSiblings = (siblingPaths => {
            const names = [];
            siblingPaths.forEach(path => {
                const name = core.getAttribute(_nodes[path], 'name');
                if(names.indexOf(name) === -1) {
                    names.push(name);
                    checkUniqueName(core.getChildrenPaths(_nodes[path]));
                } else {
                    createMessage(_nodes[path], 'Elements of a given level of the workflow should have unique names', 'error');
                    result.setSuccess(false);
                }
            });
        });
    };

    /**
     * While not necessarily an issue, if not all input has a default value, then automated
     * execution is in jeopardy and therefore we would like to note the user that they might
     * want to reconsider and give default values to all inputs.
     */
    CheckWorkflow.prototype.checkDefaultInput = function () {
        const {core, activeNode, _nodes, META, createMessage} = this;
        const inputs = [];
        core.getChildrenPaths(activeNode).forEach(path => {
            if (core.isInstanceOf(_nodes[path], META['Input']) && !core.getAttribute(_nodes[path], 'value')) {
                createMessage(_nodes[path], 'Input does not have a set default value which will potentially block automated execution!', 'warning');
            }
        });
    };

    CheckWorkflow.prototype.getChecks = function () {
        const members = Object.getOwnPropertyNames(this);
        const checks = [];

        members.forEach(member => {
            if( typeof member === 'function' && member.name.indexOf('check') === 0) {
                checks.push(member);
            }
        });

        return checks;
    };

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(Error|null, plugin.PluginResult)} callback - the result callback
     */
    CheckWorkflow.prototype.main = function (callback) {
        const checks = this.getChecks();
        const {result, activeNode, loadNodeMap} = this;

        result.setSuccess(true);

        loadNodeMap(activeNode)
        .then(map => {
            this._nodes = map;
            checks.forEach(check => {
                check();
            });
            callback(null, result);
        })
        .catch(err => {
            result.setSuccess(false);
            callback(err, result);
        });
    };

    return CheckWorkflow;
});
