/*globals define*/
/*eslint-env node, browser*/

/**
 * Generated by PluginGenerator 2.20.5 from webgme on Tue Jan 17 2023 23:31:47 GMT-0600 (Central Standard Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    'q'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase,
    Q) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of ImportWorkflow.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin ImportWorkflow.
     * @constructor
     */
    function ImportWorkflow() {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    }

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructure etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    ImportWorkflow.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    ImportWorkflow.prototype = Object.create(PluginBase.prototype);
    ImportWorkflow.prototype.constructor = ImportWorkflow;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(Error|null, plugin.PluginResult)} callback - the result callback
     */
    ImportWorkflow.prototype.main = function (callback) {
        const config = this.getCurrentConfig();
        this._newNodes = {};
        this.getJsonWorkflow()
        .then(jsonWorkflow => {
            this.workflowFromJSON(this.activeNode, jsonWorkflow, null);
            return this.save('ImportWorkflow have added a new workflow to the project');
        })
        .then(() => {
            this.result.setSuccess(true);
            callback(null, this.result);
        })
        .catch((err) => {
            // Result success is false at invocation.
            this.logger.error(err.stack);
            callback(err, this.result);
        });
    };

    ImportWorkflow.prototype.getJsonWorkflow = function () {
        const config = this.getCurrentConfig();

        if(config.json) {
            return Q(config.json);
        } else {
            return this.blobClient.getObjectAsJSON(config.workflow);
        }
        
    };

    ImportWorkflow.prototype.workflowFromJSON = function (parentNode, jsonNode, relid) {
        const {core, META} = this;
        const createParams = {
            parent: parentNode, 
            base: META['Workflow']
        };
        let mainWorkflow = false;
        
        if (relid) {
            createParams.relid = relid;
        } else {
            mainWorkflow = true;
        }

        const node = core.createNode(createParams);

        if (mainWorkflow) {
            this._newNodes[''] = node;
            this.workflowNode = node;
        } else {
            this._newNodes[this.getOwnPath(node)] = node;
        }

        this.setAttributes(node, jsonNode);
        this.setRegistry(node, jsonNode);

        Object.keys(jsonNode.ports || {}).forEach(relid => {
            this.portFromJSON(node, jsonNode.ports[relid], relid);
        });

        Object.keys(jsonNode.steps || {}).forEach(relid => {
            this.stepFromJSON(node, jsonNode.steps[relid], relid);
        });

        Object.keys(jsonNode.subs || {}).forEach(relid => {
            this.workflowFromJSON(node, jsonNode.subs[relid], relid);
        });

        Object.keys(jsonNode.flows || {}).forEach(relid => {
            this.flowFromJSON(node, jsonNode.flows[relid], relid);
        });
    };

    ImportWorkflow.prototype.stepFromJSON = function (parentNode, jsonNode, relid) {
        const {core, META} = this;
        const node =core.createNode({
            parent: parentNode, 
            base: META[jsonNode.type.name],
            relid: relid
        });
        this._newNodes[this.getOwnPath(node)] = node;

        this.setAttributes(node, jsonNode);
        this.setRegistry(node, jsonNode);

        Object.keys(jsonNode.ports).forEach(relid => {
            this.portFromJSON(node, jsonNode.ports[relid], relid);
        });
    };

    ImportWorkflow.prototype.portFromJSON = function (parentNode, jsonNode, relid) {
        const {core, META} = this;
        const node = core.createNode({
            parent: parentNode, 
            base: META[jsonNode.type.name],
            relid: relid
        });
        this._newNodes[this.getOwnPath(node)] = node;

        this.setAttributes(node, jsonNode);
        this.setRegistry(node, jsonNode);
    };


    ImportWorkflow.prototype.flowFromJSON = function (parentNode, jsonNode, relid) {
        const {core, META} = this;
        const node =core.createNode({
            parent: parentNode, 
            base: META[jsonNode.type.name],
            relid: relid
        });

        this._newNodes[this.getOwnPath(node)] = node;
        this.setAttributes(node, jsonNode);
        this.setRegistry(node, jsonNode);

        core.setPointer(node, 'src', this._newNodes[jsonNode.src]);
        core.setPointer(node, 'dst', this._newNodes[jsonNode.dst]);
    };

    ImportWorkflow.prototype.setAttributes = function (node, jsonNode) {
        const {core} = this;

        Object.keys(jsonNode.attributes || {}).forEach(name => {
            core.setAttribute(node, name, jsonNode.attributes[name]);
        });
    };

    ImportWorkflow.prototype.setRegistry = function (node, jsonNode) {
        const {core} = this;

        Object.keys(jsonNode.registry || {}).forEach(name => {
            core.setRegistry(node, name, jsonNode.registry[name]);
        });
    };

    ImportWorkflow.prototype.getOwnPath = function (node) {
        const {workflowNode, core} = this;
        const mainPath = core.getPath(workflowNode);
        const fullPath = core.getPath(node);
        const regex = new RegExp('^'+mainPath,'g');
        return fullPath.replace(regex, '');
    };


    return ImportWorkflow;
});
