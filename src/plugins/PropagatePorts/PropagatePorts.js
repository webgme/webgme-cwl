/*globals define*/
/*eslint-env node, browser*/

/**
 * Generated by PluginGenerator 2.20.5 from webgme on Sun Aug 27 2023 21:00:42 GMT-0500 (Central Daylight Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    'q'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase,
    Q) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    //TODO maybe some common place for it???
    const typeToConnection = {
        'FileInput': 'FlowFi2Fi',
        'FileArrayInput': 'FlowFai2Fai',
        'DirectoryInput': 'FlowDi2Di',
        'DirectoryArrayInput': 'FlowDai2Dai',
        'StringInput': 'FlowSi2Si',
        'StringArrayInput': 'FlowSai2Sai',
        'FileOutput': 'FlowFo2Fo',
        'FileArrayOutput': 'FlowFao2Fao',
        'DirectoryOutput': 'FlowDo2Do',
        'DirectoryArrayOutput': 'FlowDao2Dao',
        'StringOutput': 'FlowSo2So',
        'StringArrayOutput': 'FlowSao2Sao',
    };

    /**
     * Initializes a new instance of PropagatePorts.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin PropagatePorts.
     * @constructor
     */
    function PropagatePorts() {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    }

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructure etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    PropagatePorts.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    PropagatePorts.prototype = Object.create(PluginBase.prototype);
    PropagatePorts.prototype.constructor = PropagatePorts;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(Error|null, plugin.PluginResult)} callback - the result callback
     */
    PropagatePorts.prototype.main = function (callback) {
        // Use this to access core, project, result, logger etc from PluginBase.
        const {activeNode, activeSelection, result, core, META} = this;

        core.loadSubTree(activeNode)
        .then(nodes => {
            const nodeHash = {};
            nodes.forEach(node => {
                nodeHash[core.getPath(node)] = node;
            });

            const childToPropagate = activeSelection[0];
            let madeChanges = false;
            core.getChildrenPaths(childToPropagate).forEach(childPath => {
                if(core.isInstanceOf(nodeHash[childPath],META.Input)) {
                    if (core.getCollectionPaths(nodeHash[childPath],'dst').length === 0) {
                        madeChanges = true;
                        const newPort = core.copyNode(nodeHash[childPath], activeNode);
                        const newConnection = core.createNode({
                            parent:activeNode, 
                            base:META[typeToConnection[core.getAttribute(core.getMetaType(nodeHash[childPath]),'name')]]
                        });
                        core.setPointer(newConnection, 'src', newPort);
                        core.setPointer(newConnection, 'dst', nodeHash[childPath]);
                    }
                } else if (core.isInstanceOf(nodeHash[childPath],META.Output)) {
                    if (core.getCollectionPaths(nodeHash[childPath],'src').length === 0) {
                        madeChanges = true;
                        const newPort = core.copyNode(nodeHash[childPath], activeNode);
                        const newConnection = core.createNode({
                            parent:activeNode, 
                            base:META[typeToConnection[core.getAttribute(core.getMetaType(nodeHash[childPath]),'name')]]
                        });
                        core.setPointer(newConnection, 'dst', newPort);
                        core.setPointer(newConnection, 'src', nodeHash[childPath]);
                    }
                } 
            });

            if (madeChanges) {
                return this.save('PropagatePorts created new elements in the model');
            } else {
                return Q(null);
            }
        })
        .then(() => {
            self.result.setSuccess(true);
            callback(null, self.result);
        })
        .catch(err => {
            self.logger.error(err.stack);
            callback(err, self.result);
        });
    };

    return PropagatePorts;
});
